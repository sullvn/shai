name: Test and Release
on: 
  pull_request:
    types:
      - opened
      - reoponed
      - synchronize
  push:
    branches:
      - main
permissions:
  contents: write
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
      - name: Typecheck
        run: cargo check
      - name: Clippy
        run: cargo clippy
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  is-release:
    needs: [lint, test]
    outputs:
      result: ${{ steps.is-release.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Is release?
        id: is-release
        shell: python
        run: |
          import os
          import re
          import subprocess

          ref = '${{ github.ref }}'
          ref_type = '${{ github.ref_type }}'
          ref_name = '${{ github.ref_name }}'

          branch = subprocess.run(
              ['git', 'branch', '--remotes', '--contains', ref],
              capture_output = True,
              text = True
          ).stdout

          is_merged = branch == 'origin/main'
          is_tag = ref_type == 'tag'
          is_version_number = re.match(
              r'^v\d+\.\d+\.\d+$',
              ref_name
          )
          is_release = is_merged and is_tag and is_version_number

          result = 'true' if is_release else 'false'
          with open(os.environ['GITHUB_OUTPUT'], 'w') as f:
              f.write('result=' + result)
  build:
    needs: is-release
    if: needs.is-release.outputs.result == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
      - name: Get host triple
        id: host-triple
        shell: python
        run: |
          import os
          import re
          import subprocess

          rustc_info = subprocess.run(
              ['rustc', '--version', '--verbose'],
              capture_output = True,
              text = True
          ).stdout

          host_triple = re.search(
              r'host:\s*(\S+)',
              rustc_info
          ).group(1)

          with open(os.environ['GITHUB_OUTPUT'], 'w') as f:
              f.write('result=' + host_triple)
      - name: Build binary
        run: cargo build --release
      - name: Rename binary
        shell: bash
        run: |
          BINARY_FILENAME="${{
              format(
                'shai-{0}-{1}',
                steps.host-triple.outputs.result,
                github.ref_name
              )
            }}"

          mkdir artifacts
          mv target/release/shai artifacts/$BINARY_FILENAME
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }} Build
          path: artifacts/*
          if-no-files-found: error
  publish-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: artifacts/*/*
    

